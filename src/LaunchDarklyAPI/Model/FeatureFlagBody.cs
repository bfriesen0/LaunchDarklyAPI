/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LaunchDarklyAPI.Client.SwaggerDateConverter;

namespace LaunchDarklyAPI.Model
{
    /// <summary>
    /// FeatureFlagBody
    /// </summary>
    [DataContract]
    public partial class FeatureFlagBody :  IEquatable<FeatureFlagBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeatureFlagBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagBody" /> class.
        /// </summary>
        /// <param name="name">A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent. (required).</param>
        /// <param name="key">A unique key that will be used to reference the flag in your code. (required).</param>
        /// <param name="variations">An array of possible variations for the flag. (required).</param>
        /// <param name="temporary">Whether or not the flag is a temporary flag..</param>
        /// <param name="tags">Tags for the feature flag..</param>
        /// <param name="includeInSnippet">Whether or not this flag should be made available to the client-side JavaScript SDK..</param>
        public FeatureFlagBody(string name = default(string), string key = default(string), List<Variation> variations = default(List<Variation>), bool? temporary = default(bool?), List<string> tags = default(List<string>), bool? includeInSnippet = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for FeatureFlagBody and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for FeatureFlagBody and cannot be null");
            }
            else
            {
                this.Key = key;
            }
            // to ensure "variations" is required (not null)
            if (variations == null)
            {
                throw new InvalidDataException("variations is a required property for FeatureFlagBody and cannot be null");
            }
            else
            {
                this.Variations = variations;
            }
            this.Temporary = temporary;
            this.Tags = tags;
            this.IncludeInSnippet = includeInSnippet;
        }
        
        /// <summary>
        /// A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.
        /// </summary>
        /// <value>A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A unique key that will be used to reference the flag in your code.
        /// </summary>
        /// <value>A unique key that will be used to reference the flag in your code.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// An array of possible variations for the flag.
        /// </summary>
        /// <value>An array of possible variations for the flag.</value>
        [DataMember(Name="variations", EmitDefaultValue=false)]
        public List<Variation> Variations { get; set; }

        /// <summary>
        /// Whether or not the flag is a temporary flag.
        /// </summary>
        /// <value>Whether or not the flag is a temporary flag.</value>
        [DataMember(Name="temporary", EmitDefaultValue=false)]
        public bool? Temporary { get; set; }

        /// <summary>
        /// Tags for the feature flag.
        /// </summary>
        /// <value>Tags for the feature flag.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Whether or not this flag should be made available to the client-side JavaScript SDK.
        /// </summary>
        /// <value>Whether or not this flag should be made available to the client-side JavaScript SDK.</value>
        [DataMember(Name="includeInSnippet", EmitDefaultValue=false)]
        public bool? IncludeInSnippet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureFlagBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("  Temporary: ").Append(Temporary).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  IncludeInSnippet: ").Append(IncludeInSnippet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureFlagBody);
        }

        /// <summary>
        /// Returns true if FeatureFlagBody instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureFlagBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureFlagBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Variations == input.Variations ||
                    this.Variations != null &&
                    this.Variations.SequenceEqual(input.Variations)
                ) && 
                (
                    this.Temporary == input.Temporary ||
                    (this.Temporary != null &&
                    this.Temporary.Equals(input.Temporary))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.IncludeInSnippet == input.IncludeInSnippet ||
                    (this.IncludeInSnippet != null &&
                    this.IncludeInSnippet.Equals(input.IncludeInSnippet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Variations != null)
                    hashCode = hashCode * 59 + this.Variations.GetHashCode();
                if (this.Temporary != null)
                    hashCode = hashCode * 59 + this.Temporary.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.IncludeInSnippet != null)
                    hashCode = hashCode * 59 + this.IncludeInSnippet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
