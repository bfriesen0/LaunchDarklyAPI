/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LaunchDarklyAPI.Client.SwaggerDateConverter;

namespace LaunchDarklyAPI.Model
{
    /// <summary>
    /// UserRecord
    /// </summary>
    [DataContract]
    public partial class UserRecord :  IEquatable<UserRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRecord" /> class.
        /// </summary>
        /// <param name="lastPing">lastPing.</param>
        /// <param name="environmentId">environmentId.</param>
        /// <param name="ownerId">ownerId.</param>
        /// <param name="user">user.</param>
        /// <param name="avatar">avatar.</param>
        public UserRecord(string lastPing = default(string), string environmentId = default(string), Id ownerId = default(Id), User user = default(User), string avatar = default(string))
        {
            this.LastPing = lastPing;
            this.EnvironmentId = environmentId;
            this.OwnerId = ownerId;
            this.User = user;
            this.Avatar = avatar;
        }
        
        /// <summary>
        /// Gets or Sets LastPing
        /// </summary>
        [DataMember(Name="lastPing", EmitDefaultValue=false)]
        public string LastPing { get; set; }

        /// <summary>
        /// Gets or Sets EnvironmentId
        /// </summary>
        [DataMember(Name="environmentId", EmitDefaultValue=false)]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name="ownerId", EmitDefaultValue=false)]
        public Id OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name="avatar", EmitDefaultValue=false)]
        public string Avatar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRecord {\n");
            sb.Append("  LastPing: ").Append(LastPing).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRecord);
        }

        /// <summary>
        /// Returns true if UserRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastPing == input.LastPing ||
                    (this.LastPing != null &&
                    this.LastPing.Equals(input.LastPing))
                ) && 
                (
                    this.EnvironmentId == input.EnvironmentId ||
                    (this.EnvironmentId != null &&
                    this.EnvironmentId.Equals(input.EnvironmentId))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastPing != null)
                    hashCode = hashCode * 59 + this.LastPing.GetHashCode();
                if (this.EnvironmentId != null)
                    hashCode = hashCode * 59 + this.EnvironmentId.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Avatar != null)
                    hashCode = hashCode * 59 + this.Avatar.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
