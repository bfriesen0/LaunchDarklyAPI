/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LaunchDarklyAPI.Client.SwaggerDateConverter;

namespace LaunchDarklyAPI.Model
{
    /// <summary>
    /// Fallthrough
    /// </summary>
    [DataContract]
    public partial class Fallthrough :  IEquatable<Fallthrough>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fallthrough" /> class.
        /// </summary>
        /// <param name="variation">variation.</param>
        /// <param name="rollout">rollout.</param>
        public Fallthrough(int? variation = default(int?), Rollout rollout = default(Rollout))
        {
            this.Variation = variation;
            this.Rollout = rollout;
        }
        
        /// <summary>
        /// Gets or Sets Variation
        /// </summary>
        [DataMember(Name="variation", EmitDefaultValue=false)]
        public int? Variation { get; set; }

        /// <summary>
        /// Gets or Sets Rollout
        /// </summary>
        [DataMember(Name="rollout", EmitDefaultValue=false)]
        public Rollout Rollout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fallthrough {\n");
            sb.Append("  Variation: ").Append(Variation).Append("\n");
            sb.Append("  Rollout: ").Append(Rollout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fallthrough);
        }

        /// <summary>
        /// Returns true if Fallthrough instances are equal
        /// </summary>
        /// <param name="input">Instance of Fallthrough to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fallthrough input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Variation == input.Variation ||
                    (this.Variation != null &&
                    this.Variation.Equals(input.Variation))
                ) && 
                (
                    this.Rollout == input.Rollout ||
                    (this.Rollout != null &&
                    this.Rollout.Equals(input.Rollout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Variation != null)
                    hashCode = hashCode * 59 + this.Variation.GetHashCode();
                if (this.Rollout != null)
                    hashCode = hashCode * 59 + this.Rollout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
