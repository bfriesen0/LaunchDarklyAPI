/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LaunchDarklyAPI.Client.SwaggerDateConverter;

namespace LaunchDarklyAPI.Model
{
    /// <summary>
    /// Environment
    /// </summary>
    [DataContract]
    public partial class Environment :  IEquatable<Environment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Environment" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="id">id.</param>
        /// <param name="key">The key for the environment..</param>
        /// <param name="name">The name of the environment..</param>
        /// <param name="apiKey">The SDK key for backend LaunchDarkly SDKs..</param>
        /// <param name="mobileKey">The SDK key for mobile LaunchDarkly SDKs..</param>
        /// <param name="color">The swatch color for the environment..</param>
        /// <param name="defaultTtl">The default TTL..</param>
        /// <param name="secureMode">Determines if this environment is in safe mode..</param>
        /// <param name="defaultTrackEvents">Set to true to send detailed event information for new flags..</param>
        public Environment(Links links = default(Links), Id id = default(Id), string key = default(string), string name = default(string), string apiKey = default(string), string mobileKey = default(string), string color = default(string), decimal? defaultTtl = default(decimal?), bool? secureMode = default(bool?), bool? defaultTrackEvents = default(bool?))
        {
            this.Links = links;
            this.Id = id;
            this.Key = key;
            this.Name = name;
            this.ApiKey = apiKey;
            this.MobileKey = mobileKey;
            this.Color = color;
            this.DefaultTtl = defaultTtl;
            this.SecureMode = secureMode;
            this.DefaultTrackEvents = defaultTrackEvents;
        }
        
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public Links Links { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public Id Id { get; set; }

        /// <summary>
        /// The key for the environment.
        /// </summary>
        /// <value>The key for the environment.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the environment.
        /// </summary>
        /// <value>The name of the environment.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The SDK key for backend LaunchDarkly SDKs.
        /// </summary>
        /// <value>The SDK key for backend LaunchDarkly SDKs.</value>
        [DataMember(Name="apiKey", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// The SDK key for mobile LaunchDarkly SDKs.
        /// </summary>
        /// <value>The SDK key for mobile LaunchDarkly SDKs.</value>
        [DataMember(Name="mobileKey", EmitDefaultValue=false)]
        public string MobileKey { get; set; }

        /// <summary>
        /// The swatch color for the environment.
        /// </summary>
        /// <value>The swatch color for the environment.</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// The default TTL.
        /// </summary>
        /// <value>The default TTL.</value>
        [DataMember(Name="defaultTtl", EmitDefaultValue=false)]
        public decimal? DefaultTtl { get; set; }

        /// <summary>
        /// Determines if this environment is in safe mode.
        /// </summary>
        /// <value>Determines if this environment is in safe mode.</value>
        [DataMember(Name="secureMode", EmitDefaultValue=false)]
        public bool? SecureMode { get; set; }

        /// <summary>
        /// Set to true to send detailed event information for new flags.
        /// </summary>
        /// <value>Set to true to send detailed event information for new flags.</value>
        [DataMember(Name="defaultTrackEvents", EmitDefaultValue=false)]
        public bool? DefaultTrackEvents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Environment {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  MobileKey: ").Append(MobileKey).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  DefaultTtl: ").Append(DefaultTtl).Append("\n");
            sb.Append("  SecureMode: ").Append(SecureMode).Append("\n");
            sb.Append("  DefaultTrackEvents: ").Append(DefaultTrackEvents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Environment);
        }

        /// <summary>
        /// Returns true if Environment instances are equal
        /// </summary>
        /// <param name="input">Instance of Environment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Environment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.MobileKey == input.MobileKey ||
                    (this.MobileKey != null &&
                    this.MobileKey.Equals(input.MobileKey))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.DefaultTtl == input.DefaultTtl ||
                    (this.DefaultTtl != null &&
                    this.DefaultTtl.Equals(input.DefaultTtl))
                ) && 
                (
                    this.SecureMode == input.SecureMode ||
                    (this.SecureMode != null &&
                    this.SecureMode.Equals(input.SecureMode))
                ) && 
                (
                    this.DefaultTrackEvents == input.DefaultTrackEvents ||
                    (this.DefaultTrackEvents != null &&
                    this.DefaultTrackEvents.Equals(input.DefaultTrackEvents))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.MobileKey != null)
                    hashCode = hashCode * 59 + this.MobileKey.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.DefaultTtl != null)
                    hashCode = hashCode * 59 + this.DefaultTtl.GetHashCode();
                if (this.SecureMode != null)
                    hashCode = hashCode * 59 + this.SecureMode.GetHashCode();
                if (this.DefaultTrackEvents != null)
                    hashCode = hashCode * 59 + this.DefaultTrackEvents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
