/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LaunchDarklyAPI.Client.SwaggerDateConverter;

namespace LaunchDarklyAPI.Model
{
    /// <summary>
    /// FeatureFlagConfig
    /// </summary>
    [DataContract]
    public partial class FeatureFlagConfig :  IEquatable<FeatureFlagConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagConfig" /> class.
        /// </summary>
        /// <param name="on">on.</param>
        /// <param name="archived">archived.</param>
        /// <param name="salt">salt.</param>
        /// <param name="sel">sel.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="version">version.</param>
        /// <param name="targets">targets.</param>
        /// <param name="rules">rules.</param>
        /// <param name="fallthrough">fallthrough.</param>
        /// <param name="offVariation">offVariation.</param>
        /// <param name="prerequisites">prerequisites.</param>
        /// <param name="trackEvents">Set to true to send detailed event information for this flag..</param>
        public FeatureFlagConfig(bool? on = default(bool?), bool? archived = default(bool?), string salt = default(string), string sel = default(string), long? lastModified = default(long?), int? version = default(int?), List<Target> targets = default(List<Target>), List<Rule> rules = default(List<Rule>), Fallthrough fallthrough = default(Fallthrough), int? offVariation = default(int?), List<Prerequisite> prerequisites = default(List<Prerequisite>), bool? trackEvents = default(bool?))
        {
            this.On = on;
            this.Archived = archived;
            this.Salt = salt;
            this.Sel = sel;
            this.LastModified = lastModified;
            this.Version = version;
            this.Targets = targets;
            this.Rules = rules;
            this.Fallthrough = fallthrough;
            this.OffVariation = offVariation;
            this.Prerequisites = prerequisites;
            this.TrackEvents = trackEvents;
        }
        
        /// <summary>
        /// Gets or Sets On
        /// </summary>
        [DataMember(Name="on", EmitDefaultValue=false)]
        public bool? On { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public bool? Archived { get; set; }

        /// <summary>
        /// Gets or Sets Salt
        /// </summary>
        [DataMember(Name="salt", EmitDefaultValue=false)]
        public string Salt { get; set; }

        /// <summary>
        /// Gets or Sets Sel
        /// </summary>
        [DataMember(Name="sel", EmitDefaultValue=false)]
        public string Sel { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="lastModified", EmitDefaultValue=false)]
        public long? LastModified { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name="targets", EmitDefaultValue=false)]
        public List<Target> Targets { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<Rule> Rules { get; set; }

        /// <summary>
        /// Gets or Sets Fallthrough
        /// </summary>
        [DataMember(Name="fallthrough", EmitDefaultValue=false)]
        public Fallthrough Fallthrough { get; set; }

        /// <summary>
        /// Gets or Sets OffVariation
        /// </summary>
        [DataMember(Name="offVariation", EmitDefaultValue=false)]
        public int? OffVariation { get; set; }

        /// <summary>
        /// Gets or Sets Prerequisites
        /// </summary>
        [DataMember(Name="prerequisites", EmitDefaultValue=false)]
        public List<Prerequisite> Prerequisites { get; set; }

        /// <summary>
        /// Set to true to send detailed event information for this flag.
        /// </summary>
        /// <value>Set to true to send detailed event information for this flag.</value>
        [DataMember(Name="trackEvents", EmitDefaultValue=false)]
        public bool? TrackEvents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureFlagConfig {\n");
            sb.Append("  On: ").Append(On).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("  Sel: ").Append(Sel).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Fallthrough: ").Append(Fallthrough).Append("\n");
            sb.Append("  OffVariation: ").Append(OffVariation).Append("\n");
            sb.Append("  Prerequisites: ").Append(Prerequisites).Append("\n");
            sb.Append("  TrackEvents: ").Append(TrackEvents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureFlagConfig);
        }

        /// <summary>
        /// Returns true if FeatureFlagConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureFlagConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureFlagConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.On == input.On ||
                    (this.On != null &&
                    this.On.Equals(input.On))
                ) && 
                (
                    this.Archived == input.Archived ||
                    (this.Archived != null &&
                    this.Archived.Equals(input.Archived))
                ) && 
                (
                    this.Salt == input.Salt ||
                    (this.Salt != null &&
                    this.Salt.Equals(input.Salt))
                ) && 
                (
                    this.Sel == input.Sel ||
                    (this.Sel != null &&
                    this.Sel.Equals(input.Sel))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Targets == input.Targets ||
                    this.Targets != null &&
                    this.Targets.SequenceEqual(input.Targets)
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                ) && 
                (
                    this.Fallthrough == input.Fallthrough ||
                    (this.Fallthrough != null &&
                    this.Fallthrough.Equals(input.Fallthrough))
                ) && 
                (
                    this.OffVariation == input.OffVariation ||
                    (this.OffVariation != null &&
                    this.OffVariation.Equals(input.OffVariation))
                ) && 
                (
                    this.Prerequisites == input.Prerequisites ||
                    this.Prerequisites != null &&
                    this.Prerequisites.SequenceEqual(input.Prerequisites)
                ) && 
                (
                    this.TrackEvents == input.TrackEvents ||
                    (this.TrackEvents != null &&
                    this.TrackEvents.Equals(input.TrackEvents))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.On != null)
                    hashCode = hashCode * 59 + this.On.GetHashCode();
                if (this.Archived != null)
                    hashCode = hashCode * 59 + this.Archived.GetHashCode();
                if (this.Salt != null)
                    hashCode = hashCode * 59 + this.Salt.GetHashCode();
                if (this.Sel != null)
                    hashCode = hashCode * 59 + this.Sel.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Targets != null)
                    hashCode = hashCode * 59 + this.Targets.GetHashCode();
                if (this.Rules != null)
                    hashCode = hashCode * 59 + this.Rules.GetHashCode();
                if (this.Fallthrough != null)
                    hashCode = hashCode * 59 + this.Fallthrough.GetHashCode();
                if (this.OffVariation != null)
                    hashCode = hashCode * 59 + this.OffVariation.GetHashCode();
                if (this.Prerequisites != null)
                    hashCode = hashCode * 59 + this.Prerequisites.GetHashCode();
                if (this.TrackEvents != null)
                    hashCode = hashCode * 59 + this.TrackEvents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
