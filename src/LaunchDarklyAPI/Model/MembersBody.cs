/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LaunchDarklyAPI.Client.SwaggerDateConverter;

namespace LaunchDarklyAPI.Model
{
    /// <summary>
    /// MembersBody
    /// </summary>
    [DataContract]
    public partial class MembersBody :  IEquatable<MembersBody>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public Role? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MembersBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MembersBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MembersBody" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="role">role.</param>
        /// <param name="customRoles">customRoles.</param>
        /// <param name="inlineRole">inlineRole.</param>
        public MembersBody(string email = default(string), string firstName = default(string), string lastName = default(string), Role? role = default(Role?), List<CustomRoleKeyOrId> customRoles = default(List<CustomRoleKeyOrId>), Statements inlineRole = default(Statements))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for MembersBody and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Role = role;
            this.CustomRoles = customRoles;
            this.InlineRole = inlineRole;
        }
        
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }


        /// <summary>
        /// Gets or Sets CustomRoles
        /// </summary>
        [DataMember(Name="customRoles", EmitDefaultValue=false)]
        public List<CustomRoleKeyOrId> CustomRoles { get; set; }

        /// <summary>
        /// Gets or Sets InlineRole
        /// </summary>
        [DataMember(Name="inlineRole", EmitDefaultValue=false)]
        public Statements InlineRole { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MembersBody {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  CustomRoles: ").Append(CustomRoles).Append("\n");
            sb.Append("  InlineRole: ").Append(InlineRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MembersBody);
        }

        /// <summary>
        /// Returns true if MembersBody instances are equal
        /// </summary>
        /// <param name="input">Instance of MembersBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MembersBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.CustomRoles == input.CustomRoles ||
                    this.CustomRoles != null &&
                    this.CustomRoles.SequenceEqual(input.CustomRoles)
                ) && 
                (
                    this.InlineRole == input.InlineRole ||
                    (this.InlineRole != null &&
                    this.InlineRole.Equals(input.InlineRole))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.CustomRoles != null)
                    hashCode = hashCode * 59 + this.CustomRoles.GetHashCode();
                if (this.InlineRole != null)
                    hashCode = hashCode * 59 + this.InlineRole.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
