/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = LaunchDarklyAPI.Client.SwaggerDateConverter;

namespace LaunchDarklyAPI.Model
{
    /// <summary>
    /// FeatureFlag
    /// </summary>
    [DataContract]
    public partial class FeatureFlag :  IEquatable<FeatureFlag>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlag" /> class.
        /// </summary>
        /// <param name="key">key.</param>
        /// <param name="name">Name of the feature flag..</param>
        /// <param name="description">Description of the feature flag..</param>
        /// <param name="kind">Whether the feature flag is a boolean flag or multivariate..</param>
        /// <param name="creationDate">A unix epoch time in milliseconds specifying the creation time of this flag..</param>
        /// <param name="includeInSnippet">includeInSnippet.</param>
        /// <param name="temporary">Whether or not this flag is temporary..</param>
        /// <param name="maintainerId">The ID of the member that should maintain this flag..</param>
        /// <param name="tags">An array of tags for this feature flag..</param>
        /// <param name="variations">The variations for this feature flag..</param>
        /// <param name="links">links.</param>
        /// <param name="maintainer">maintainer.</param>
        /// <param name="environments">environments.</param>
        public FeatureFlag(string key = default(string), string name = default(string), string description = default(string), string kind = default(string), decimal? creationDate = default(decimal?), bool? includeInSnippet = default(bool?), bool? temporary = default(bool?), string maintainerId = default(string), List<string> tags = default(List<string>), List<Variation> variations = default(List<Variation>), Links links = default(Links), Member maintainer = default(Member), Dictionary<string, FeatureFlagConfig> environments = default(Dictionary<string, FeatureFlagConfig>))
        {
            this.Key = key;
            this.Name = name;
            this.Description = description;
            this.Kind = kind;
            this.CreationDate = creationDate;
            this.IncludeInSnippet = includeInSnippet;
            this.Temporary = temporary;
            this.MaintainerId = maintainerId;
            this.Tags = tags;
            this.Variations = variations;
            this.Links = links;
            this.Maintainer = maintainer;
            this.Environments = environments;
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Name of the feature flag.
        /// </summary>
        /// <value>Name of the feature flag.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the feature flag.
        /// </summary>
        /// <value>Description of the feature flag.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the feature flag is a boolean flag or multivariate.
        /// </summary>
        /// <value>Whether the feature flag is a boolean flag or multivariate.</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// A unix epoch time in milliseconds specifying the creation time of this flag.
        /// </summary>
        /// <value>A unix epoch time in milliseconds specifying the creation time of this flag.</value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public decimal? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets IncludeInSnippet
        /// </summary>
        [DataMember(Name="includeInSnippet", EmitDefaultValue=false)]
        public bool? IncludeInSnippet { get; set; }

        /// <summary>
        /// Whether or not this flag is temporary.
        /// </summary>
        /// <value>Whether or not this flag is temporary.</value>
        [DataMember(Name="temporary", EmitDefaultValue=false)]
        public bool? Temporary { get; set; }

        /// <summary>
        /// The ID of the member that should maintain this flag.
        /// </summary>
        /// <value>The ID of the member that should maintain this flag.</value>
        [DataMember(Name="maintainerId", EmitDefaultValue=false)]
        public string MaintainerId { get; set; }

        /// <summary>
        /// An array of tags for this feature flag.
        /// </summary>
        /// <value>An array of tags for this feature flag.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// The variations for this feature flag.
        /// </summary>
        /// <value>The variations for this feature flag.</value>
        [DataMember(Name="variations", EmitDefaultValue=false)]
        public List<Variation> Variations { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public Links Links { get; set; }

        /// <summary>
        /// Gets or Sets Maintainer
        /// </summary>
        [DataMember(Name="_maintainer", EmitDefaultValue=false)]
        public Member Maintainer { get; set; }

        /// <summary>
        /// Gets or Sets Environments
        /// </summary>
        [DataMember(Name="environments", EmitDefaultValue=false)]
        public Dictionary<string, FeatureFlagConfig> Environments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureFlag {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  IncludeInSnippet: ").Append(IncludeInSnippet).Append("\n");
            sb.Append("  Temporary: ").Append(Temporary).Append("\n");
            sb.Append("  MaintainerId: ").Append(MaintainerId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Maintainer: ").Append(Maintainer).Append("\n");
            sb.Append("  Environments: ").Append(Environments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureFlag);
        }

        /// <summary>
        /// Returns true if FeatureFlag instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureFlag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureFlag input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.IncludeInSnippet == input.IncludeInSnippet ||
                    (this.IncludeInSnippet != null &&
                    this.IncludeInSnippet.Equals(input.IncludeInSnippet))
                ) && 
                (
                    this.Temporary == input.Temporary ||
                    (this.Temporary != null &&
                    this.Temporary.Equals(input.Temporary))
                ) && 
                (
                    this.MaintainerId == input.MaintainerId ||
                    (this.MaintainerId != null &&
                    this.MaintainerId.Equals(input.MaintainerId))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Variations == input.Variations ||
                    this.Variations != null &&
                    this.Variations.SequenceEqual(input.Variations)
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                ) && 
                (
                    this.Maintainer == input.Maintainer ||
                    (this.Maintainer != null &&
                    this.Maintainer.Equals(input.Maintainer))
                ) && 
                (
                    this.Environments == input.Environments ||
                    this.Environments != null &&
                    this.Environments.SequenceEqual(input.Environments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.IncludeInSnippet != null)
                    hashCode = hashCode * 59 + this.IncludeInSnippet.GetHashCode();
                if (this.Temporary != null)
                    hashCode = hashCode * 59 + this.Temporary.GetHashCode();
                if (this.MaintainerId != null)
                    hashCode = hashCode * 59 + this.MaintainerId.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Variations != null)
                    hashCode = hashCode * 59 + this.Variations.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Maintainer != null)
                    hashCode = hashCode * 59 + this.Maintainer.GetHashCode();
                if (this.Environments != null)
                    hashCode = hashCode * 59 + this.Environments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
