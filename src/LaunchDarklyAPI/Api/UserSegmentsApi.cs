/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using LaunchDarklyAPI.Client;
using LaunchDarklyAPI.Model;

namespace LaunchDarklyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSegmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns></returns>
        void DeleteUserSegment (string projectKey, string environmentKey, string userSegmentKey);

        /// <summary>
        /// Delete a user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserSegmentWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey);
        /// <summary>
        /// Get a single user segment by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>UserSegment</returns>
        UserSegment GetUserSegment (string projectKey, string environmentKey, string userSegmentKey);

        /// <summary>
        /// Get a single user segment by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>ApiResponse of UserSegment</returns>
        ApiResponse<UserSegment> GetUserSegmentWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey);
        /// <summary>
        /// Get a list of all user segments in the given project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>UserSegments</returns>
        UserSegments GetUserSegments (string projectKey, string environmentKey, string tag = null);

        /// <summary>
        /// Get a list of all user segments in the given project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>ApiResponse of UserSegments</returns>
        ApiResponse<UserSegments> GetUserSegmentsWithHttpInfo (string projectKey, string environmentKey, string tag = null);
        /// <summary>
        /// Perform a partial update to a user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <param name="patchOnly">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>UserSegment</returns>
        UserSegment PatchUserSegment (string projectKey, string environmentKey, string userSegmentKey, List<PatchOperation> patchOnly);

        /// <summary>
        /// Perform a partial update to a user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <param name="patchOnly">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>ApiResponse of UserSegment</returns>
        ApiResponse<UserSegment> PatchUserSegmentWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey, List<PatchOperation> patchOnly);
        /// <summary>
        /// Creates a new user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentBody">Create a new user segment.</param>
        /// <returns></returns>
        void PostUserSegment (string projectKey, string environmentKey, UserSegmentBody userSegmentBody);

        /// <summary>
        /// Creates a new user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentBody">Create a new user segment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUserSegmentWithHttpInfo (string projectKey, string environmentKey, UserSegmentBody userSegmentBody);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserSegmentAsync (string projectKey, string environmentKey, string userSegmentKey);

        /// <summary>
        /// Delete a user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserSegmentAsyncWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey);
        /// <summary>
        /// Get a single user segment by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>Task of UserSegment</returns>
        System.Threading.Tasks.Task<UserSegment> GetUserSegmentAsync (string projectKey, string environmentKey, string userSegmentKey);

        /// <summary>
        /// Get a single user segment by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>Task of ApiResponse (UserSegment)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSegment>> GetUserSegmentAsyncWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey);
        /// <summary>
        /// Get a list of all user segments in the given project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>Task of UserSegments</returns>
        System.Threading.Tasks.Task<UserSegments> GetUserSegmentsAsync (string projectKey, string environmentKey, string tag = null);

        /// <summary>
        /// Get a list of all user segments in the given project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>Task of ApiResponse (UserSegments)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSegments>> GetUserSegmentsAsyncWithHttpInfo (string projectKey, string environmentKey, string tag = null);
        /// <summary>
        /// Perform a partial update to a user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <param name="patchOnly">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>Task of UserSegment</returns>
        System.Threading.Tasks.Task<UserSegment> PatchUserSegmentAsync (string projectKey, string environmentKey, string userSegmentKey, List<PatchOperation> patchOnly);

        /// <summary>
        /// Perform a partial update to a user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <param name="patchOnly">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>Task of ApiResponse (UserSegment)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSegment>> PatchUserSegmentAsyncWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey, List<PatchOperation> patchOnly);
        /// <summary>
        /// Creates a new user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentBody">Create a new user segment.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUserSegmentAsync (string projectKey, string environmentKey, UserSegmentBody userSegmentBody);

        /// <summary>
        /// Creates a new user segment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentBody">Create a new user segment.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUserSegmentAsyncWithHttpInfo (string projectKey, string environmentKey, UserSegmentBody userSegmentBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserSegmentsApi : IUserSegmentsApi
    {
        private LaunchDarklyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSegmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserSegmentsApi(String basePath)
        {
            this.Configuration = new LaunchDarklyAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSegmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserSegmentsApi(LaunchDarklyAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LaunchDarklyAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LaunchDarklyAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LaunchDarklyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns></returns>
        public void DeleteUserSegment (string projectKey, string environmentKey, string userSegmentKey)
        {
             DeleteUserSegmentWithHttpInfo(projectKey, environmentKey, userSegmentKey);
        }

        /// <summary>
        /// Delete a user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserSegmentWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSegmentsApi->DeleteUserSegment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSegmentsApi->DeleteUserSegment");
            // verify the required parameter 'userSegmentKey' is set
            if (userSegmentKey == null)
                throw new ApiException(400, "Missing required parameter 'userSegmentKey' when calling UserSegmentsApi->DeleteUserSegment");

            var localVarPath = "/segments/{projectKey}/{environmentKey}/{userSegmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userSegmentKey != null) localVarPathParams.Add("userSegmentKey", this.Configuration.ApiClient.ParameterToString(userSegmentKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserSegmentAsync (string projectKey, string environmentKey, string userSegmentKey)
        {
             await DeleteUserSegmentAsyncWithHttpInfo(projectKey, environmentKey, userSegmentKey);

        }

        /// <summary>
        /// Delete a user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserSegmentAsyncWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSegmentsApi->DeleteUserSegment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSegmentsApi->DeleteUserSegment");
            // verify the required parameter 'userSegmentKey' is set
            if (userSegmentKey == null)
                throw new ApiException(400, "Missing required parameter 'userSegmentKey' when calling UserSegmentsApi->DeleteUserSegment");

            var localVarPath = "/segments/{projectKey}/{environmentKey}/{userSegmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userSegmentKey != null) localVarPathParams.Add("userSegmentKey", this.Configuration.ApiClient.ParameterToString(userSegmentKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a single user segment by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>UserSegment</returns>
        public UserSegment GetUserSegment (string projectKey, string environmentKey, string userSegmentKey)
        {
             ApiResponse<UserSegment> localVarResponse = GetUserSegmentWithHttpInfo(projectKey, environmentKey, userSegmentKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single user segment by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>ApiResponse of UserSegment</returns>
        public ApiResponse< UserSegment > GetUserSegmentWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSegmentsApi->GetUserSegment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSegmentsApi->GetUserSegment");
            // verify the required parameter 'userSegmentKey' is set
            if (userSegmentKey == null)
                throw new ApiException(400, "Missing required parameter 'userSegmentKey' when calling UserSegmentsApi->GetUserSegment");

            var localVarPath = "/segments/{projectKey}/{environmentKey}/{userSegmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userSegmentKey != null) localVarPathParams.Add("userSegmentKey", this.Configuration.ApiClient.ParameterToString(userSegmentKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSegment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSegment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSegment)));
        }

        /// <summary>
        /// Get a single user segment by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>Task of UserSegment</returns>
        public async System.Threading.Tasks.Task<UserSegment> GetUserSegmentAsync (string projectKey, string environmentKey, string userSegmentKey)
        {
             ApiResponse<UserSegment> localVarResponse = await GetUserSegmentAsyncWithHttpInfo(projectKey, environmentKey, userSegmentKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single user segment by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <returns>Task of ApiResponse (UserSegment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSegment>> GetUserSegmentAsyncWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSegmentsApi->GetUserSegment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSegmentsApi->GetUserSegment");
            // verify the required parameter 'userSegmentKey' is set
            if (userSegmentKey == null)
                throw new ApiException(400, "Missing required parameter 'userSegmentKey' when calling UserSegmentsApi->GetUserSegment");

            var localVarPath = "/segments/{projectKey}/{environmentKey}/{userSegmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userSegmentKey != null) localVarPathParams.Add("userSegmentKey", this.Configuration.ApiClient.ParameterToString(userSegmentKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSegment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSegment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSegment)));
        }

        /// <summary>
        /// Get a list of all user segments in the given project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>UserSegments</returns>
        public UserSegments GetUserSegments (string projectKey, string environmentKey, string tag = null)
        {
             ApiResponse<UserSegments> localVarResponse = GetUserSegmentsWithHttpInfo(projectKey, environmentKey, tag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all user segments in the given project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>ApiResponse of UserSegments</returns>
        public ApiResponse< UserSegments > GetUserSegmentsWithHttpInfo (string projectKey, string environmentKey, string tag = null)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSegmentsApi->GetUserSegments");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSegmentsApi->GetUserSegments");

            var localVarPath = "/segments/{projectKey}/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSegments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSegments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSegments)));
        }

        /// <summary>
        /// Get a list of all user segments in the given project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>Task of UserSegments</returns>
        public async System.Threading.Tasks.Task<UserSegments> GetUserSegmentsAsync (string projectKey, string environmentKey, string tag = null)
        {
             ApiResponse<UserSegments> localVarResponse = await GetUserSegmentsAsyncWithHttpInfo(projectKey, environmentKey, tag);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all user segments in the given project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>Task of ApiResponse (UserSegments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSegments>> GetUserSegmentsAsyncWithHttpInfo (string projectKey, string environmentKey, string tag = null)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSegmentsApi->GetUserSegments");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSegmentsApi->GetUserSegments");

            var localVarPath = "/segments/{projectKey}/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSegments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSegments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSegments)));
        }

        /// <summary>
        /// Perform a partial update to a user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <param name="patchOnly">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>UserSegment</returns>
        public UserSegment PatchUserSegment (string projectKey, string environmentKey, string userSegmentKey, List<PatchOperation> patchOnly)
        {
             ApiResponse<UserSegment> localVarResponse = PatchUserSegmentWithHttpInfo(projectKey, environmentKey, userSegmentKey, patchOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a partial update to a user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <param name="patchOnly">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>ApiResponse of UserSegment</returns>
        public ApiResponse< UserSegment > PatchUserSegmentWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey, List<PatchOperation> patchOnly)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSegmentsApi->PatchUserSegment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSegmentsApi->PatchUserSegment");
            // verify the required parameter 'userSegmentKey' is set
            if (userSegmentKey == null)
                throw new ApiException(400, "Missing required parameter 'userSegmentKey' when calling UserSegmentsApi->PatchUserSegment");
            // verify the required parameter 'patchOnly' is set
            if (patchOnly == null)
                throw new ApiException(400, "Missing required parameter 'patchOnly' when calling UserSegmentsApi->PatchUserSegment");

            var localVarPath = "/segments/{projectKey}/{environmentKey}/{userSegmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userSegmentKey != null) localVarPathParams.Add("userSegmentKey", this.Configuration.ApiClient.ParameterToString(userSegmentKey)); // path parameter
            if (patchOnly != null && patchOnly.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchOnly); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchOnly; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchUserSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSegment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSegment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSegment)));
        }

        /// <summary>
        /// Perform a partial update to a user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <param name="patchOnly">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>Task of UserSegment</returns>
        public async System.Threading.Tasks.Task<UserSegment> PatchUserSegmentAsync (string projectKey, string environmentKey, string userSegmentKey, List<PatchOperation> patchOnly)
        {
             ApiResponse<UserSegment> localVarResponse = await PatchUserSegmentAsyncWithHttpInfo(projectKey, environmentKey, userSegmentKey, patchOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform a partial update to a user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentKey">The user segment&#39;s key. The key identifies the user segment in your code.</param>
        /// <param name="patchOnly">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>Task of ApiResponse (UserSegment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSegment>> PatchUserSegmentAsyncWithHttpInfo (string projectKey, string environmentKey, string userSegmentKey, List<PatchOperation> patchOnly)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSegmentsApi->PatchUserSegment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSegmentsApi->PatchUserSegment");
            // verify the required parameter 'userSegmentKey' is set
            if (userSegmentKey == null)
                throw new ApiException(400, "Missing required parameter 'userSegmentKey' when calling UserSegmentsApi->PatchUserSegment");
            // verify the required parameter 'patchOnly' is set
            if (patchOnly == null)
                throw new ApiException(400, "Missing required parameter 'patchOnly' when calling UserSegmentsApi->PatchUserSegment");

            var localVarPath = "/segments/{projectKey}/{environmentKey}/{userSegmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userSegmentKey != null) localVarPathParams.Add("userSegmentKey", this.Configuration.ApiClient.ParameterToString(userSegmentKey)); // path parameter
            if (patchOnly != null && patchOnly.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchOnly); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchOnly; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchUserSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSegment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSegment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSegment)));
        }

        /// <summary>
        /// Creates a new user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentBody">Create a new user segment.</param>
        /// <returns></returns>
        public void PostUserSegment (string projectKey, string environmentKey, UserSegmentBody userSegmentBody)
        {
             PostUserSegmentWithHttpInfo(projectKey, environmentKey, userSegmentBody);
        }

        /// <summary>
        /// Creates a new user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentBody">Create a new user segment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUserSegmentWithHttpInfo (string projectKey, string environmentKey, UserSegmentBody userSegmentBody)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSegmentsApi->PostUserSegment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSegmentsApi->PostUserSegment");
            // verify the required parameter 'userSegmentBody' is set
            if (userSegmentBody == null)
                throw new ApiException(400, "Missing required parameter 'userSegmentBody' when calling UserSegmentsApi->PostUserSegment");

            var localVarPath = "/segments/{projectKey}/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userSegmentBody != null && userSegmentBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userSegmentBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSegmentBody; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUserSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentBody">Create a new user segment.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUserSegmentAsync (string projectKey, string environmentKey, UserSegmentBody userSegmentBody)
        {
             await PostUserSegmentAsyncWithHttpInfo(projectKey, environmentKey, userSegmentBody);

        }

        /// <summary>
        /// Creates a new user segment. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userSegmentBody">Create a new user segment.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUserSegmentAsyncWithHttpInfo (string projectKey, string environmentKey, UserSegmentBody userSegmentBody)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSegmentsApi->PostUserSegment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSegmentsApi->PostUserSegment");
            // verify the required parameter 'userSegmentBody' is set
            if (userSegmentBody == null)
                throw new ApiException(400, "Missing required parameter 'userSegmentBody' when calling UserSegmentsApi->PostUserSegment");

            var localVarPath = "/segments/{projectKey}/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userSegmentBody != null && userSegmentBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userSegmentBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSegmentBody; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUserSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
