/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using LaunchDarklyAPI.Client;
using LaunchDarklyAPI.Model;

namespace LaunchDarklyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a user by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns></returns>
        void DeleteUser (string projectKey, string environmentKey, string userKey);

        /// <summary>
        /// Delete a user by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (string projectKey, string environmentKey, string userKey);
        /// <summary>
        /// Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly- - use the List users API resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="q">Search query. (optional)</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="offset">Specifies the first item to return in the collection. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <returns>Users</returns>
        Users GetSearchUsers (string projectKey, string environmentKey, string q = null, int? limit = null, int? offset = null, decimal? after = null);

        /// <summary>
        /// Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly- - use the List users API resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="q">Search query. (optional)</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="offset">Specifies the first item to return in the collection. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> GetSearchUsersWithHttpInfo (string projectKey, string environmentKey, string q = null, int? limit = null, int? offset = null, decimal? after = null);
        /// <summary>
        /// Get a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>User</returns>
        User GetUser (string projectKey, string environmentKey, string userKey);

        /// <summary>
        /// Get a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo (string projectKey, string environmentKey, string userKey);
        /// <summary>
        /// List all users in the environment. Includes the total count of users. In each page, there will be up to &#39;limit&#39; users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="h">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <param name="scrollId">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <returns>Users</returns>
        Users GetUsers (string projectKey, string environmentKey, int? limit = null, string h = null, string scrollId = null);

        /// <summary>
        /// List all users in the environment. Includes the total count of users. In each page, there will be up to &#39;limit&#39; users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="h">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <param name="scrollId">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> GetUsersWithHttpInfo (string projectKey, string environmentKey, int? limit = null, string h = null, string scrollId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a user by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (string projectKey, string environmentKey, string userKey);

        /// <summary>
        /// Delete a user by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string projectKey, string environmentKey, string userKey);
        /// <summary>
        /// Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly- - use the List users API resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="q">Search query. (optional)</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="offset">Specifies the first item to return in the collection. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> GetSearchUsersAsync (string projectKey, string environmentKey, string q = null, int? limit = null, int? offset = null, decimal? after = null);

        /// <summary>
        /// Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly- - use the List users API resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="q">Search query. (optional)</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="offset">Specifies the first item to return in the collection. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> GetSearchUsersAsyncWithHttpInfo (string projectKey, string environmentKey, string q = null, int? limit = null, int? offset = null, decimal? after = null);
        /// <summary>
        /// Get a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync (string projectKey, string environmentKey, string userKey);

        /// <summary>
        /// Get a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (string projectKey, string environmentKey, string userKey);
        /// <summary>
        /// List all users in the environment. Includes the total count of users. In each page, there will be up to &#39;limit&#39; users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="h">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <param name="scrollId">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> GetUsersAsync (string projectKey, string environmentKey, int? limit = null, string h = null, string scrollId = null);

        /// <summary>
        /// List all users in the environment. Includes the total count of users. In each page, there will be up to &#39;limit&#39; users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="h">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <param name="scrollId">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> GetUsersAsyncWithHttpInfo (string projectKey, string environmentKey, int? limit = null, string h = null, string scrollId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private LaunchDarklyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new LaunchDarklyAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(LaunchDarklyAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LaunchDarklyAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LaunchDarklyAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LaunchDarklyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a user by ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns></returns>
        public void DeleteUser (string projectKey, string environmentKey, string userKey)
        {
             DeleteUserWithHttpInfo(projectKey, environmentKey, userKey);
        }

        /// <summary>
        /// Delete a user by ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserWithHttpInfo (string projectKey, string environmentKey, string userKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UsersApi->DeleteUser");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UsersApi->DeleteUser");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{projectKey}/{environmentKey}/{userKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", this.Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user by ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (string projectKey, string environmentKey, string userKey)
        {
             await DeleteUserAsyncWithHttpInfo(projectKey, environmentKey, userKey);

        }

        /// <summary>
        /// Delete a user by ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string projectKey, string environmentKey, string userKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UsersApi->DeleteUser");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UsersApi->DeleteUser");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{projectKey}/{environmentKey}/{userKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", this.Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly- - use the List users API resource. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="q">Search query. (optional)</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="offset">Specifies the first item to return in the collection. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <returns>Users</returns>
        public Users GetSearchUsers (string projectKey, string environmentKey, string q = null, int? limit = null, int? offset = null, decimal? after = null)
        {
             ApiResponse<Users> localVarResponse = GetSearchUsersWithHttpInfo(projectKey, environmentKey, q, limit, offset, after);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly- - use the List users API resource. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="q">Search query. (optional)</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="offset">Specifies the first item to return in the collection. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <returns>ApiResponse of Users</returns>
        public ApiResponse< Users > GetSearchUsersWithHttpInfo (string projectKey, string environmentKey, string q = null, int? limit = null, int? offset = null, decimal? after = null)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UsersApi->GetSearchUsers");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UsersApi->GetSearchUsers");

            var localVarPath = "/user-search/{projectKey}/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSearchUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Users>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Users) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Users)));
        }

        /// <summary>
        /// Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly- - use the List users API resource. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="q">Search query. (optional)</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="offset">Specifies the first item to return in the collection. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> GetSearchUsersAsync (string projectKey, string environmentKey, string q = null, int? limit = null, int? offset = null, decimal? after = null)
        {
             ApiResponse<Users> localVarResponse = await GetSearchUsersAsyncWithHttpInfo(projectKey, environmentKey, q, limit, offset, after);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly- - use the List users API resource. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="q">Search query. (optional)</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="offset">Specifies the first item to return in the collection. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Users>> GetSearchUsersAsyncWithHttpInfo (string projectKey, string environmentKey, string q = null, int? limit = null, int? offset = null, decimal? after = null)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UsersApi->GetSearchUsers");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UsersApi->GetSearchUsers");

            var localVarPath = "/user-search/{projectKey}/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSearchUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Users>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Users) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Users)));
        }

        /// <summary>
        /// Get a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>User</returns>
        public User GetUser (string projectKey, string environmentKey, string userKey)
        {
             ApiResponse<User> localVarResponse = GetUserWithHttpInfo(projectKey, environmentKey, userKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUserWithHttpInfo (string projectKey, string environmentKey, string userKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UsersApi->GetUser");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UsersApi->GetUser");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UsersApi->GetUser");

            var localVarPath = "/users/{projectKey}/{environmentKey}/{userKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", this.Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync (string projectKey, string environmentKey, string userKey)
        {
             ApiResponse<User> localVarResponse = await GetUserAsyncWithHttpInfo(projectKey, environmentKey, userKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (string projectKey, string environmentKey, string userKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UsersApi->GetUser");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UsersApi->GetUser");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UsersApi->GetUser");

            var localVarPath = "/users/{projectKey}/{environmentKey}/{userKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", this.Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// List all users in the environment. Includes the total count of users. In each page, there will be up to &#39;limit&#39; users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="h">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <param name="scrollId">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <returns>Users</returns>
        public Users GetUsers (string projectKey, string environmentKey, int? limit = null, string h = null, string scrollId = null)
        {
             ApiResponse<Users> localVarResponse = GetUsersWithHttpInfo(projectKey, environmentKey, limit, h, scrollId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all users in the environment. Includes the total count of users. In each page, there will be up to &#39;limit&#39; users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="h">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <param name="scrollId">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <returns>ApiResponse of Users</returns>
        public ApiResponse< Users > GetUsersWithHttpInfo (string projectKey, string environmentKey, int? limit = null, string h = null, string scrollId = null)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UsersApi->GetUsers");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UsersApi->GetUsers");

            var localVarPath = "/users/{projectKey}/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (h != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "h", h)); // query parameter
            if (scrollId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scrollId", scrollId)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Users>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Users) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Users)));
        }

        /// <summary>
        /// List all users in the environment. Includes the total count of users. In each page, there will be up to &#39;limit&#39; users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="h">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <param name="scrollId">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> GetUsersAsync (string projectKey, string environmentKey, int? limit = null, string h = null, string scrollId = null)
        {
             ApiResponse<Users> localVarResponse = await GetUsersAsyncWithHttpInfo(projectKey, environmentKey, limit, h, scrollId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all users in the environment. Includes the total count of users. In each page, there will be up to &#39;limit&#39; users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="limit">Pagination limit. (optional)</param>
        /// <param name="h">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <param name="scrollId">This parameter is required when following \&quot;next\&quot; links. (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Users>> GetUsersAsyncWithHttpInfo (string projectKey, string environmentKey, int? limit = null, string h = null, string scrollId = null)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UsersApi->GetUsers");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UsersApi->GetUsers");

            var localVarPath = "/users/{projectKey}/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (h != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "h", h)); // query parameter
            if (scrollId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scrollId", scrollId)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Users>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Users) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Users)));
        }

    }
}
