/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using LaunchDarklyAPI.Client;
using LaunchDarklyAPI.Model;

namespace LaunchDarklyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch a single flag setting for a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>UserFlagSetting</returns>
        UserFlagSetting GetUserFlagSetting (string projectKey, string environmentKey, string userKey, string featureFlagKey);

        /// <summary>
        /// Fetch a single flag setting for a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>ApiResponse of UserFlagSetting</returns>
        ApiResponse<UserFlagSetting> GetUserFlagSettingWithHttpInfo (string projectKey, string environmentKey, string userKey, string featureFlagKey);
        /// <summary>
        /// Fetch a single flag setting for a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>UserFlagSettings</returns>
        UserFlagSettings GetUserFlagSettings (string projectKey, string environmentKey, string userKey);

        /// <summary>
        /// Fetch a single flag setting for a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>ApiResponse of UserFlagSettings</returns>
        ApiResponse<UserFlagSettings> GetUserFlagSettingsWithHttpInfo (string projectKey, string environmentKey, string userKey);
        /// <summary>
        /// Specifically enable or disable a feature flag for a user based on their key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="userSettingsBody"></param>
        /// <returns></returns>
        void PutFlagSetting (string projectKey, string environmentKey, string userKey, string featureFlagKey, UserSettingsBody userSettingsBody);

        /// <summary>
        /// Specifically enable or disable a feature flag for a user based on their key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="userSettingsBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutFlagSettingWithHttpInfo (string projectKey, string environmentKey, string userKey, string featureFlagKey, UserSettingsBody userSettingsBody);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetch a single flag setting for a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of UserFlagSetting</returns>
        System.Threading.Tasks.Task<UserFlagSetting> GetUserFlagSettingAsync (string projectKey, string environmentKey, string userKey, string featureFlagKey);

        /// <summary>
        /// Fetch a single flag setting for a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of ApiResponse (UserFlagSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFlagSetting>> GetUserFlagSettingAsyncWithHttpInfo (string projectKey, string environmentKey, string userKey, string featureFlagKey);
        /// <summary>
        /// Fetch a single flag setting for a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of UserFlagSettings</returns>
        System.Threading.Tasks.Task<UserFlagSettings> GetUserFlagSettingsAsync (string projectKey, string environmentKey, string userKey);

        /// <summary>
        /// Fetch a single flag setting for a user by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of ApiResponse (UserFlagSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFlagSettings>> GetUserFlagSettingsAsyncWithHttpInfo (string projectKey, string environmentKey, string userKey);
        /// <summary>
        /// Specifically enable or disable a feature flag for a user based on their key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="userSettingsBody"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutFlagSettingAsync (string projectKey, string environmentKey, string userKey, string featureFlagKey, UserSettingsBody userSettingsBody);

        /// <summary>
        /// Specifically enable or disable a feature flag for a user based on their key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="userSettingsBody"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutFlagSettingAsyncWithHttpInfo (string projectKey, string environmentKey, string userKey, string featureFlagKey, UserSettingsBody userSettingsBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserSettingsApi : IUserSettingsApi
    {
        private LaunchDarklyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserSettingsApi(String basePath)
        {
            this.Configuration = new LaunchDarklyAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserSettingsApi(LaunchDarklyAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LaunchDarklyAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LaunchDarklyAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LaunchDarklyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetch a single flag setting for a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>UserFlagSetting</returns>
        public UserFlagSetting GetUserFlagSetting (string projectKey, string environmentKey, string userKey, string featureFlagKey)
        {
             ApiResponse<UserFlagSetting> localVarResponse = GetUserFlagSettingWithHttpInfo(projectKey, environmentKey, userKey, featureFlagKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a single flag setting for a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>ApiResponse of UserFlagSetting</returns>
        public ApiResponse< UserFlagSetting > GetUserFlagSettingWithHttpInfo (string projectKey, string environmentKey, string userKey, string featureFlagKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSettingsApi->GetUserFlagSetting");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSettingsApi->GetUserFlagSetting");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UserSettingsApi->GetUserFlagSetting");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling UserSettingsApi->GetUserFlagSetting");

            var localVarPath = "/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", this.Configuration.ApiClient.ParameterToString(userKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserFlagSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFlagSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserFlagSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFlagSetting)));
        }

        /// <summary>
        /// Fetch a single flag setting for a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of UserFlagSetting</returns>
        public async System.Threading.Tasks.Task<UserFlagSetting> GetUserFlagSettingAsync (string projectKey, string environmentKey, string userKey, string featureFlagKey)
        {
             ApiResponse<UserFlagSetting> localVarResponse = await GetUserFlagSettingAsyncWithHttpInfo(projectKey, environmentKey, userKey, featureFlagKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch a single flag setting for a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of ApiResponse (UserFlagSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserFlagSetting>> GetUserFlagSettingAsyncWithHttpInfo (string projectKey, string environmentKey, string userKey, string featureFlagKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSettingsApi->GetUserFlagSetting");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSettingsApi->GetUserFlagSetting");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UserSettingsApi->GetUserFlagSetting");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling UserSettingsApi->GetUserFlagSetting");

            var localVarPath = "/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", this.Configuration.ApiClient.ParameterToString(userKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserFlagSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFlagSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserFlagSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFlagSetting)));
        }

        /// <summary>
        /// Fetch a single flag setting for a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>UserFlagSettings</returns>
        public UserFlagSettings GetUserFlagSettings (string projectKey, string environmentKey, string userKey)
        {
             ApiResponse<UserFlagSettings> localVarResponse = GetUserFlagSettingsWithHttpInfo(projectKey, environmentKey, userKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a single flag setting for a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>ApiResponse of UserFlagSettings</returns>
        public ApiResponse< UserFlagSettings > GetUserFlagSettingsWithHttpInfo (string projectKey, string environmentKey, string userKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSettingsApi->GetUserFlagSettings");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSettingsApi->GetUserFlagSettings");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UserSettingsApi->GetUserFlagSettings");

            var localVarPath = "/users/{projectKey}/{environmentKey}/{userKey}/flags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", this.Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserFlagSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFlagSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserFlagSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFlagSettings)));
        }

        /// <summary>
        /// Fetch a single flag setting for a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of UserFlagSettings</returns>
        public async System.Threading.Tasks.Task<UserFlagSettings> GetUserFlagSettingsAsync (string projectKey, string environmentKey, string userKey)
        {
             ApiResponse<UserFlagSettings> localVarResponse = await GetUserFlagSettingsAsyncWithHttpInfo(projectKey, environmentKey, userKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch a single flag setting for a user by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <returns>Task of ApiResponse (UserFlagSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserFlagSettings>> GetUserFlagSettingsAsyncWithHttpInfo (string projectKey, string environmentKey, string userKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSettingsApi->GetUserFlagSettings");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSettingsApi->GetUserFlagSettings");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UserSettingsApi->GetUserFlagSettings");

            var localVarPath = "/users/{projectKey}/{environmentKey}/{userKey}/flags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", this.Configuration.ApiClient.ParameterToString(userKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserFlagSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFlagSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserFlagSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFlagSettings)));
        }

        /// <summary>
        /// Specifically enable or disable a feature flag for a user based on their key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="userSettingsBody"></param>
        /// <returns></returns>
        public void PutFlagSetting (string projectKey, string environmentKey, string userKey, string featureFlagKey, UserSettingsBody userSettingsBody)
        {
             PutFlagSettingWithHttpInfo(projectKey, environmentKey, userKey, featureFlagKey, userSettingsBody);
        }

        /// <summary>
        /// Specifically enable or disable a feature flag for a user based on their key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="userSettingsBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutFlagSettingWithHttpInfo (string projectKey, string environmentKey, string userKey, string featureFlagKey, UserSettingsBody userSettingsBody)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSettingsApi->PutFlagSetting");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSettingsApi->PutFlagSetting");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UserSettingsApi->PutFlagSetting");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling UserSettingsApi->PutFlagSetting");
            // verify the required parameter 'userSettingsBody' is set
            if (userSettingsBody == null)
                throw new ApiException(400, "Missing required parameter 'userSettingsBody' when calling UserSettingsApi->PutFlagSetting");

            var localVarPath = "/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", this.Configuration.ApiClient.ParameterToString(userKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter
            if (userSettingsBody != null && userSettingsBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userSettingsBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSettingsBody; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFlagSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Specifically enable or disable a feature flag for a user based on their key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="userSettingsBody"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutFlagSettingAsync (string projectKey, string environmentKey, string userKey, string featureFlagKey, UserSettingsBody userSettingsBody)
        {
             await PutFlagSettingAsyncWithHttpInfo(projectKey, environmentKey, userKey, featureFlagKey, userSettingsBody);

        }

        /// <summary>
        /// Specifically enable or disable a feature flag for a user based on their key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="userSettingsBody"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutFlagSettingAsyncWithHttpInfo (string projectKey, string environmentKey, string userKey, string featureFlagKey, UserSettingsBody userSettingsBody)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling UserSettingsApi->PutFlagSetting");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling UserSettingsApi->PutFlagSetting");
            // verify the required parameter 'userKey' is set
            if (userKey == null)
                throw new ApiException(400, "Missing required parameter 'userKey' when calling UserSettingsApi->PutFlagSetting");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling UserSettingsApi->PutFlagSetting");
            // verify the required parameter 'userSettingsBody' is set
            if (userSettingsBody == null)
                throw new ApiException(400, "Missing required parameter 'userSettingsBody' when calling UserSettingsApi->PutFlagSetting");

            var localVarPath = "/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (userKey != null) localVarPathParams.Add("userKey", this.Configuration.ApiClient.ParameterToString(userKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter
            if (userSettingsBody != null && userSettingsBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userSettingsBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSettingsBody; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFlagSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
