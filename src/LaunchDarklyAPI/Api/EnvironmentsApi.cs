/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using LaunchDarklyAPI.Client;
using LaunchDarklyAPI.Model;

namespace LaunchDarklyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvironmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an environment in a specific project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns></returns>
        void DeleteEnvironment (string projectKey, string environmentKey);

        /// <summary>
        /// Delete an environment in a specific project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEnvironmentWithHttpInfo (string projectKey, string environmentKey);
        /// <summary>
        /// Get an environment given a project and key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Environment</returns>
        Environment GetEnvironment (string projectKey, string environmentKey);

        /// <summary>
        /// Get an environment given a project and key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>ApiResponse of Environment</returns>
        ApiResponse<Environment> GetEnvironmentWithHttpInfo (string projectKey, string environmentKey);
        /// <summary>
        /// Modify an environment by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="patchDelta">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39;</param>
        /// <returns>Environment</returns>
        Environment PatchEnvironment (string projectKey, string environmentKey, List<PatchOperation> patchDelta);

        /// <summary>
        /// Modify an environment by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="patchDelta">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39;</param>
        /// <returns>ApiResponse of Environment</returns>
        ApiResponse<Environment> PatchEnvironmentWithHttpInfo (string projectKey, string environmentKey, List<PatchOperation> patchDelta);
        /// <summary>
        /// Create a new environment in a specified project with a given name, key, and swatch color.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentBody">New environment.</param>
        /// <returns></returns>
        void PostEnvironment (string projectKey, EnvironmentBody environmentBody);

        /// <summary>
        /// Create a new environment in a specified project with a given name, key, and swatch color.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentBody">New environment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostEnvironmentWithHttpInfo (string projectKey, EnvironmentBody environmentBody);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete an environment in a specific project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEnvironmentAsync (string projectKey, string environmentKey);

        /// <summary>
        /// Delete an environment in a specific project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEnvironmentAsyncWithHttpInfo (string projectKey, string environmentKey);
        /// <summary>
        /// Get an environment given a project and key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of Environment</returns>
        System.Threading.Tasks.Task<Environment> GetEnvironmentAsync (string projectKey, string environmentKey);

        /// <summary>
        /// Get an environment given a project and key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of ApiResponse (Environment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Environment>> GetEnvironmentAsyncWithHttpInfo (string projectKey, string environmentKey);
        /// <summary>
        /// Modify an environment by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="patchDelta">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39;</param>
        /// <returns>Task of Environment</returns>
        System.Threading.Tasks.Task<Environment> PatchEnvironmentAsync (string projectKey, string environmentKey, List<PatchOperation> patchDelta);

        /// <summary>
        /// Modify an environment by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="patchDelta">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39;</param>
        /// <returns>Task of ApiResponse (Environment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Environment>> PatchEnvironmentAsyncWithHttpInfo (string projectKey, string environmentKey, List<PatchOperation> patchDelta);
        /// <summary>
        /// Create a new environment in a specified project with a given name, key, and swatch color.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentBody">New environment.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostEnvironmentAsync (string projectKey, EnvironmentBody environmentBody);

        /// <summary>
        /// Create a new environment in a specified project with a given name, key, and swatch color.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentBody">New environment.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostEnvironmentAsyncWithHttpInfo (string projectKey, EnvironmentBody environmentBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnvironmentsApi : IEnvironmentsApi
    {
        private LaunchDarklyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvironmentsApi(String basePath)
        {
            this.Configuration = new LaunchDarklyAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvironmentsApi(LaunchDarklyAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LaunchDarklyAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LaunchDarklyAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LaunchDarklyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete an environment in a specific project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns></returns>
        public void DeleteEnvironment (string projectKey, string environmentKey)
        {
             DeleteEnvironmentWithHttpInfo(projectKey, environmentKey);
        }

        /// <summary>
        /// Delete an environment in a specific project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEnvironmentWithHttpInfo (string projectKey, string environmentKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling EnvironmentsApi->DeleteEnvironment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling EnvironmentsApi->DeleteEnvironment");

            var localVarPath = "/projects/{projectKey}/environments/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an environment in a specific project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEnvironmentAsync (string projectKey, string environmentKey)
        {
             await DeleteEnvironmentAsyncWithHttpInfo(projectKey, environmentKey);

        }

        /// <summary>
        /// Delete an environment in a specific project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEnvironmentAsyncWithHttpInfo (string projectKey, string environmentKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling EnvironmentsApi->DeleteEnvironment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling EnvironmentsApi->DeleteEnvironment");

            var localVarPath = "/projects/{projectKey}/environments/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get an environment given a project and key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Environment</returns>
        public Environment GetEnvironment (string projectKey, string environmentKey)
        {
             ApiResponse<Environment> localVarResponse = GetEnvironmentWithHttpInfo(projectKey, environmentKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an environment given a project and key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>ApiResponse of Environment</returns>
        public ApiResponse< Environment > GetEnvironmentWithHttpInfo (string projectKey, string environmentKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling EnvironmentsApi->GetEnvironment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling EnvironmentsApi->GetEnvironment");

            var localVarPath = "/projects/{projectKey}/environments/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Environment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Environment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Environment)));
        }

        /// <summary>
        /// Get an environment given a project and key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of Environment</returns>
        public async System.Threading.Tasks.Task<Environment> GetEnvironmentAsync (string projectKey, string environmentKey)
        {
             ApiResponse<Environment> localVarResponse = await GetEnvironmentAsyncWithHttpInfo(projectKey, environmentKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an environment given a project and key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of ApiResponse (Environment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Environment>> GetEnvironmentAsyncWithHttpInfo (string projectKey, string environmentKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling EnvironmentsApi->GetEnvironment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling EnvironmentsApi->GetEnvironment");

            var localVarPath = "/projects/{projectKey}/environments/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Environment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Environment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Environment)));
        }

        /// <summary>
        /// Modify an environment by ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="patchDelta">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39;</param>
        /// <returns>Environment</returns>
        public Environment PatchEnvironment (string projectKey, string environmentKey, List<PatchOperation> patchDelta)
        {
             ApiResponse<Environment> localVarResponse = PatchEnvironmentWithHttpInfo(projectKey, environmentKey, patchDelta);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify an environment by ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="patchDelta">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39;</param>
        /// <returns>ApiResponse of Environment</returns>
        public ApiResponse< Environment > PatchEnvironmentWithHttpInfo (string projectKey, string environmentKey, List<PatchOperation> patchDelta)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling EnvironmentsApi->PatchEnvironment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling EnvironmentsApi->PatchEnvironment");
            // verify the required parameter 'patchDelta' is set
            if (patchDelta == null)
                throw new ApiException(400, "Missing required parameter 'patchDelta' when calling EnvironmentsApi->PatchEnvironment");

            var localVarPath = "/projects/{projectKey}/environments/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (patchDelta != null && patchDelta.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchDelta); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchDelta; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Environment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Environment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Environment)));
        }

        /// <summary>
        /// Modify an environment by ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="patchDelta">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39;</param>
        /// <returns>Task of Environment</returns>
        public async System.Threading.Tasks.Task<Environment> PatchEnvironmentAsync (string projectKey, string environmentKey, List<PatchOperation> patchDelta)
        {
             ApiResponse<Environment> localVarResponse = await PatchEnvironmentAsyncWithHttpInfo(projectKey, environmentKey, patchDelta);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify an environment by ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="patchDelta">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39;</param>
        /// <returns>Task of ApiResponse (Environment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Environment>> PatchEnvironmentAsyncWithHttpInfo (string projectKey, string environmentKey, List<PatchOperation> patchDelta)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling EnvironmentsApi->PatchEnvironment");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling EnvironmentsApi->PatchEnvironment");
            // verify the required parameter 'patchDelta' is set
            if (patchDelta == null)
                throw new ApiException(400, "Missing required parameter 'patchDelta' when calling EnvironmentsApi->PatchEnvironment");

            var localVarPath = "/projects/{projectKey}/environments/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (patchDelta != null && patchDelta.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchDelta); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchDelta; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Environment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Environment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Environment)));
        }

        /// <summary>
        /// Create a new environment in a specified project with a given name, key, and swatch color. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentBody">New environment.</param>
        /// <returns></returns>
        public void PostEnvironment (string projectKey, EnvironmentBody environmentBody)
        {
             PostEnvironmentWithHttpInfo(projectKey, environmentBody);
        }

        /// <summary>
        /// Create a new environment in a specified project with a given name, key, and swatch color. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentBody">New environment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostEnvironmentWithHttpInfo (string projectKey, EnvironmentBody environmentBody)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling EnvironmentsApi->PostEnvironment");
            // verify the required parameter 'environmentBody' is set
            if (environmentBody == null)
                throw new ApiException(400, "Missing required parameter 'environmentBody' when calling EnvironmentsApi->PostEnvironment");

            var localVarPath = "/projects/{projectKey}/environments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentBody != null && environmentBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(environmentBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = environmentBody; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new environment in a specified project with a given name, key, and swatch color. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentBody">New environment.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostEnvironmentAsync (string projectKey, EnvironmentBody environmentBody)
        {
             await PostEnvironmentAsyncWithHttpInfo(projectKey, environmentBody);

        }

        /// <summary>
        /// Create a new environment in a specified project with a given name, key, and swatch color. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentBody">New environment.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostEnvironmentAsyncWithHttpInfo (string projectKey, EnvironmentBody environmentBody)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling EnvironmentsApi->PostEnvironment");
            // verify the required parameter 'environmentBody' is set
            if (environmentBody == null)
                throw new ApiException(400, "Missing required parameter 'environmentBody' when calling EnvironmentsApi->PostEnvironment");

            var localVarPath = "/projects/{projectKey}/environments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentBody != null && environmentBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(environmentBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = environmentBody; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
