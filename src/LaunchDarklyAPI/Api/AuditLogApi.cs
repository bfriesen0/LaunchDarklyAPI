/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using LaunchDarklyAPI.Client;
using LaunchDarklyAPI.Model;

namespace LaunchDarklyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditLogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <param name="q">Text to search for. You can search for the full or partial name of the resource involved or fullpartial email address of the member who made the change. (optional)</param>
        /// <param name="limit">A limit on the number of audit log entries to be returned, between 1 and 20. (optional)</param>
        /// <param name="spec">A resource specifier, allowing you to filter audit log listings by resource. (optional)</param>
        /// <returns>AuditLogEntries</returns>
        AuditLogEntries GetAuditLogEntries (decimal? before = null, decimal? after = null, string q = null, decimal? limit = null, string spec = null);

        /// <summary>
        /// Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <param name="q">Text to search for. You can search for the full or partial name of the resource involved or fullpartial email address of the member who made the change. (optional)</param>
        /// <param name="limit">A limit on the number of audit log entries to be returned, between 1 and 20. (optional)</param>
        /// <param name="spec">A resource specifier, allowing you to filter audit log listings by resource. (optional)</param>
        /// <returns>ApiResponse of AuditLogEntries</returns>
        ApiResponse<AuditLogEntries> GetAuditLogEntriesWithHttpInfo (decimal? before = null, decimal? after = null, string q = null, decimal? limit = null, string spec = null);
        /// <summary>
        /// Use this endpoint to fetch a single audit log entry by its resouce ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">The resource ID.</param>
        /// <returns>AuditLogEntry</returns>
        AuditLogEntry GetAuditLogEntry (string resourceId);

        /// <summary>
        /// Use this endpoint to fetch a single audit log entry by its resouce ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">The resource ID.</param>
        /// <returns>ApiResponse of AuditLogEntry</returns>
        ApiResponse<AuditLogEntry> GetAuditLogEntryWithHttpInfo (string resourceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <param name="q">Text to search for. You can search for the full or partial name of the resource involved or fullpartial email address of the member who made the change. (optional)</param>
        /// <param name="limit">A limit on the number of audit log entries to be returned, between 1 and 20. (optional)</param>
        /// <param name="spec">A resource specifier, allowing you to filter audit log listings by resource. (optional)</param>
        /// <returns>Task of AuditLogEntries</returns>
        System.Threading.Tasks.Task<AuditLogEntries> GetAuditLogEntriesAsync (decimal? before = null, decimal? after = null, string q = null, decimal? limit = null, string spec = null);

        /// <summary>
        /// Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <param name="q">Text to search for. You can search for the full or partial name of the resource involved or fullpartial email address of the member who made the change. (optional)</param>
        /// <param name="limit">A limit on the number of audit log entries to be returned, between 1 and 20. (optional)</param>
        /// <param name="spec">A resource specifier, allowing you to filter audit log listings by resource. (optional)</param>
        /// <returns>Task of ApiResponse (AuditLogEntries)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLogEntries>> GetAuditLogEntriesAsyncWithHttpInfo (decimal? before = null, decimal? after = null, string q = null, decimal? limit = null, string spec = null);
        /// <summary>
        /// Use this endpoint to fetch a single audit log entry by its resouce ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">The resource ID.</param>
        /// <returns>Task of AuditLogEntry</returns>
        System.Threading.Tasks.Task<AuditLogEntry> GetAuditLogEntryAsync (string resourceId);

        /// <summary>
        /// Use this endpoint to fetch a single audit log entry by its resouce ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">The resource ID.</param>
        /// <returns>Task of ApiResponse (AuditLogEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLogEntry>> GetAuditLogEntryAsyncWithHttpInfo (string resourceId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuditLogApi : IAuditLogApi
    {
        private LaunchDarklyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditLogApi(String basePath)
        {
            this.Configuration = new LaunchDarklyAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditLogApi(LaunchDarklyAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LaunchDarklyAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LaunchDarklyAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LaunchDarklyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <param name="q">Text to search for. You can search for the full or partial name of the resource involved or fullpartial email address of the member who made the change. (optional)</param>
        /// <param name="limit">A limit on the number of audit log entries to be returned, between 1 and 20. (optional)</param>
        /// <param name="spec">A resource specifier, allowing you to filter audit log listings by resource. (optional)</param>
        /// <returns>AuditLogEntries</returns>
        public AuditLogEntries GetAuditLogEntries (decimal? before = null, decimal? after = null, string q = null, decimal? limit = null, string spec = null)
        {
             ApiResponse<AuditLogEntries> localVarResponse = GetAuditLogEntriesWithHttpInfo(before, after, q, limit, spec);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <param name="q">Text to search for. You can search for the full or partial name of the resource involved or fullpartial email address of the member who made the change. (optional)</param>
        /// <param name="limit">A limit on the number of audit log entries to be returned, between 1 and 20. (optional)</param>
        /// <param name="spec">A resource specifier, allowing you to filter audit log listings by resource. (optional)</param>
        /// <returns>ApiResponse of AuditLogEntries</returns>
        public ApiResponse< AuditLogEntries > GetAuditLogEntriesWithHttpInfo (decimal? before = null, decimal? after = null, string q = null, decimal? limit = null, string spec = null)
        {

            var localVarPath = "/auditlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (spec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "spec", spec)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogEntries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLogEntries) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogEntries)));
        }

        /// <summary>
        /// Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <param name="q">Text to search for. You can search for the full or partial name of the resource involved or fullpartial email address of the member who made the change. (optional)</param>
        /// <param name="limit">A limit on the number of audit log entries to be returned, between 1 and 20. (optional)</param>
        /// <param name="spec">A resource specifier, allowing you to filter audit log listings by resource. (optional)</param>
        /// <returns>Task of AuditLogEntries</returns>
        public async System.Threading.Tasks.Task<AuditLogEntries> GetAuditLogEntriesAsync (decimal? before = null, decimal? after = null, string q = null, decimal? limit = null, string spec = null)
        {
             ApiResponse<AuditLogEntries> localVarResponse = await GetAuditLogEntriesAsyncWithHttpInfo(before, after, q, limit, spec);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="before">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp. (optional)</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp. (optional)</param>
        /// <param name="q">Text to search for. You can search for the full or partial name of the resource involved or fullpartial email address of the member who made the change. (optional)</param>
        /// <param name="limit">A limit on the number of audit log entries to be returned, between 1 and 20. (optional)</param>
        /// <param name="spec">A resource specifier, allowing you to filter audit log listings by resource. (optional)</param>
        /// <returns>Task of ApiResponse (AuditLogEntries)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLogEntries>> GetAuditLogEntriesAsyncWithHttpInfo (decimal? before = null, decimal? after = null, string q = null, decimal? limit = null, string spec = null)
        {

            var localVarPath = "/auditlog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (spec != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "spec", spec)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogEntries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLogEntries) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogEntries)));
        }

        /// <summary>
        /// Use this endpoint to fetch a single audit log entry by its resouce ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">The resource ID.</param>
        /// <returns>AuditLogEntry</returns>
        public AuditLogEntry GetAuditLogEntry (string resourceId)
        {
             ApiResponse<AuditLogEntry> localVarResponse = GetAuditLogEntryWithHttpInfo(resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this endpoint to fetch a single audit log entry by its resouce ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">The resource ID.</param>
        /// <returns>ApiResponse of AuditLogEntry</returns>
        public ApiResponse< AuditLogEntry > GetAuditLogEntryWithHttpInfo (string resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling AuditLogApi->GetAuditLogEntry");

            var localVarPath = "/auditlog/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLogEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogEntry)));
        }

        /// <summary>
        /// Use this endpoint to fetch a single audit log entry by its resouce ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">The resource ID.</param>
        /// <returns>Task of AuditLogEntry</returns>
        public async System.Threading.Tasks.Task<AuditLogEntry> GetAuditLogEntryAsync (string resourceId)
        {
             ApiResponse<AuditLogEntry> localVarResponse = await GetAuditLogEntryAsyncWithHttpInfo(resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this endpoint to fetch a single audit log entry by its resouce ID. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">The resource ID.</param>
        /// <returns>Task of ApiResponse (AuditLogEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLogEntry>> GetAuditLogEntryAsyncWithHttpInfo (string resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling AuditLogApi->GetAuditLogEntry");

            var localVarPath = "/auditlog/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLogEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLogEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLogEntry)));
        }

    }
}
