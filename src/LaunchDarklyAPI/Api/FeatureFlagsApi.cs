/* 
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@launchdarkly.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using LaunchDarklyAPI.Client;
using LaunchDarklyAPI.Model;

namespace LaunchDarklyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeatureFlagsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a feature flag in all environments. Be careful- - only delete feature flags that are no longer being used by your application.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns></returns>
        void DeleteFeatureFlag (string projectKey, string featureFlagKey);

        /// <summary>
        /// Delete a feature flag in all environments. Be careful- - only delete feature flags that are no longer being used by your application.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFeatureFlagWithHttpInfo (string projectKey, string featureFlagKey);
        /// <summary>
        /// Get a single feature flag by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <returns>FeatureFlag</returns>
        FeatureFlag GetFeatureFlag (string projectKey, string featureFlagKey, string env = null);

        /// <summary>
        /// Get a single feature flag by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <returns>ApiResponse of FeatureFlag</returns>
        ApiResponse<FeatureFlag> GetFeatureFlagWithHttpInfo (string projectKey, string featureFlagKey, string env = null);
        /// <summary>
        /// Get the status for a particular feature flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>FeatureFlagStatus</returns>
        FeatureFlagStatus GetFeatureFlagStatus (string projectKey, string environmentKey, string featureFlagKey);

        /// <summary>
        /// Get the status for a particular feature flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>ApiResponse of FeatureFlagStatus</returns>
        ApiResponse<FeatureFlagStatus> GetFeatureFlagStatusWithHttpInfo (string projectKey, string environmentKey, string featureFlagKey);
        /// <summary>
        /// Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>FeatureFlagStatuses</returns>
        FeatureFlagStatuses GetFeatureFlagStatuses (string projectKey, string environmentKey);

        /// <summary>
        /// Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>ApiResponse of FeatureFlagStatuses</returns>
        ApiResponse<FeatureFlagStatuses> GetFeatureFlagStatusesWithHttpInfo (string projectKey, string environmentKey);
        /// <summary>
        /// Get a list of all features in the given project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>FeatureFlags</returns>
        FeatureFlags GetFeatureFlags (string projectKey, string env = null, string tag = null);

        /// <summary>
        /// Get a list of all features in the given project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>ApiResponse of FeatureFlags</returns>
        ApiResponse<FeatureFlags> GetFeatureFlagsWithHttpInfo (string projectKey, string env = null, string tag = null);
        /// <summary>
        /// Perform a partial update to a feature.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="patchComment">Requires a JSON Patch representation of the desired changes to the project, and an optional comment. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>FeatureFlag</returns>
        FeatureFlag PatchFeatureFlag (string projectKey, string featureFlagKey, PatchComment patchComment);

        /// <summary>
        /// Perform a partial update to a feature.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="patchComment">Requires a JSON Patch representation of the desired changes to the project, and an optional comment. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>ApiResponse of FeatureFlag</returns>
        ApiResponse<FeatureFlag> PatchFeatureFlagWithHttpInfo (string projectKey, string featureFlagKey, PatchComment patchComment);
        /// <summary>
        /// Creates a new feature flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagBody">Create a new feature flag.</param>
        /// <returns></returns>
        void PostFeatureFlag (string projectKey, FeatureFlagBody featureFlagBody);

        /// <summary>
        /// Creates a new feature flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagBody">Create a new feature flag.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostFeatureFlagWithHttpInfo (string projectKey, FeatureFlagBody featureFlagBody);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a feature flag in all environments. Be careful- - only delete feature flags that are no longer being used by your application.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFeatureFlagAsync (string projectKey, string featureFlagKey);

        /// <summary>
        /// Delete a feature flag in all environments. Be careful- - only delete feature flags that are no longer being used by your application.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFeatureFlagAsyncWithHttpInfo (string projectKey, string featureFlagKey);
        /// <summary>
        /// Get a single feature flag by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <returns>Task of FeatureFlag</returns>
        System.Threading.Tasks.Task<FeatureFlag> GetFeatureFlagAsync (string projectKey, string featureFlagKey, string env = null);

        /// <summary>
        /// Get a single feature flag by key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <returns>Task of ApiResponse (FeatureFlag)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureFlag>> GetFeatureFlagAsyncWithHttpInfo (string projectKey, string featureFlagKey, string env = null);
        /// <summary>
        /// Get the status for a particular feature flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of FeatureFlagStatus</returns>
        System.Threading.Tasks.Task<FeatureFlagStatus> GetFeatureFlagStatusAsync (string projectKey, string environmentKey, string featureFlagKey);

        /// <summary>
        /// Get the status for a particular feature flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of ApiResponse (FeatureFlagStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureFlagStatus>> GetFeatureFlagStatusAsyncWithHttpInfo (string projectKey, string environmentKey, string featureFlagKey);
        /// <summary>
        /// Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of FeatureFlagStatuses</returns>
        System.Threading.Tasks.Task<FeatureFlagStatuses> GetFeatureFlagStatusesAsync (string projectKey, string environmentKey);

        /// <summary>
        /// Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of ApiResponse (FeatureFlagStatuses)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureFlagStatuses>> GetFeatureFlagStatusesAsyncWithHttpInfo (string projectKey, string environmentKey);
        /// <summary>
        /// Get a list of all features in the given project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>Task of FeatureFlags</returns>
        System.Threading.Tasks.Task<FeatureFlags> GetFeatureFlagsAsync (string projectKey, string env = null, string tag = null);

        /// <summary>
        /// Get a list of all features in the given project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>Task of ApiResponse (FeatureFlags)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureFlags>> GetFeatureFlagsAsyncWithHttpInfo (string projectKey, string env = null, string tag = null);
        /// <summary>
        /// Perform a partial update to a feature.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="patchComment">Requires a JSON Patch representation of the desired changes to the project, and an optional comment. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>Task of FeatureFlag</returns>
        System.Threading.Tasks.Task<FeatureFlag> PatchFeatureFlagAsync (string projectKey, string featureFlagKey, PatchComment patchComment);

        /// <summary>
        /// Perform a partial update to a feature.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="patchComment">Requires a JSON Patch representation of the desired changes to the project, and an optional comment. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>Task of ApiResponse (FeatureFlag)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureFlag>> PatchFeatureFlagAsyncWithHttpInfo (string projectKey, string featureFlagKey, PatchComment patchComment);
        /// <summary>
        /// Creates a new feature flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagBody">Create a new feature flag.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostFeatureFlagAsync (string projectKey, FeatureFlagBody featureFlagBody);

        /// <summary>
        /// Creates a new feature flag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagBody">Create a new feature flag.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostFeatureFlagAsyncWithHttpInfo (string projectKey, FeatureFlagBody featureFlagBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeatureFlagsApi : IFeatureFlagsApi
    {
        private LaunchDarklyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeatureFlagsApi(String basePath)
        {
            this.Configuration = new LaunchDarklyAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureFlagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeatureFlagsApi(LaunchDarklyAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LaunchDarklyAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LaunchDarklyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LaunchDarklyAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LaunchDarklyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a feature flag in all environments. Be careful- - only delete feature flags that are no longer being used by your application. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns></returns>
        public void DeleteFeatureFlag (string projectKey, string featureFlagKey)
        {
             DeleteFeatureFlagWithHttpInfo(projectKey, featureFlagKey);
        }

        /// <summary>
        /// Delete a feature flag in all environments. Be careful- - only delete feature flags that are no longer being used by your application. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFeatureFlagWithHttpInfo (string projectKey, string featureFlagKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->DeleteFeatureFlag");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->DeleteFeatureFlag");

            var localVarPath = "/flags/{projectKey}/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFeatureFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a feature flag in all environments. Be careful- - only delete feature flags that are no longer being used by your application. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFeatureFlagAsync (string projectKey, string featureFlagKey)
        {
             await DeleteFeatureFlagAsyncWithHttpInfo(projectKey, featureFlagKey);

        }

        /// <summary>
        /// Delete a feature flag in all environments. Be careful- - only delete feature flags that are no longer being used by your application. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFeatureFlagAsyncWithHttpInfo (string projectKey, string featureFlagKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->DeleteFeatureFlag");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->DeleteFeatureFlag");

            var localVarPath = "/flags/{projectKey}/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFeatureFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a single feature flag by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <returns>FeatureFlag</returns>
        public FeatureFlag GetFeatureFlag (string projectKey, string featureFlagKey, string env = null)
        {
             ApiResponse<FeatureFlag> localVarResponse = GetFeatureFlagWithHttpInfo(projectKey, featureFlagKey, env);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single feature flag by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <returns>ApiResponse of FeatureFlag</returns>
        public ApiResponse< FeatureFlag > GetFeatureFlagWithHttpInfo (string projectKey, string featureFlagKey, string env = null)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->GetFeatureFlag");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->GetFeatureFlag");

            var localVarPath = "/flags/{projectKey}/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter
            if (env != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "env", env)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureFlag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureFlag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureFlag)));
        }

        /// <summary>
        /// Get a single feature flag by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <returns>Task of FeatureFlag</returns>
        public async System.Threading.Tasks.Task<FeatureFlag> GetFeatureFlagAsync (string projectKey, string featureFlagKey, string env = null)
        {
             ApiResponse<FeatureFlag> localVarResponse = await GetFeatureFlagAsyncWithHttpInfo(projectKey, featureFlagKey, env);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single feature flag by key. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <returns>Task of ApiResponse (FeatureFlag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureFlag>> GetFeatureFlagAsyncWithHttpInfo (string projectKey, string featureFlagKey, string env = null)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->GetFeatureFlag");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->GetFeatureFlag");

            var localVarPath = "/flags/{projectKey}/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter
            if (env != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "env", env)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureFlag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureFlag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureFlag)));
        }

        /// <summary>
        /// Get the status for a particular feature flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>FeatureFlagStatus</returns>
        public FeatureFlagStatus GetFeatureFlagStatus (string projectKey, string environmentKey, string featureFlagKey)
        {
             ApiResponse<FeatureFlagStatus> localVarResponse = GetFeatureFlagStatusWithHttpInfo(projectKey, environmentKey, featureFlagKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status for a particular feature flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>ApiResponse of FeatureFlagStatus</returns>
        public ApiResponse< FeatureFlagStatus > GetFeatureFlagStatusWithHttpInfo (string projectKey, string environmentKey, string featureFlagKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->GetFeatureFlagStatus");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling FeatureFlagsApi->GetFeatureFlagStatus");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->GetFeatureFlagStatus");

            var localVarPath = "/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureFlagStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureFlagStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureFlagStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureFlagStatus)));
        }

        /// <summary>
        /// Get the status for a particular feature flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of FeatureFlagStatus</returns>
        public async System.Threading.Tasks.Task<FeatureFlagStatus> GetFeatureFlagStatusAsync (string projectKey, string environmentKey, string featureFlagKey)
        {
             ApiResponse<FeatureFlagStatus> localVarResponse = await GetFeatureFlagStatusAsyncWithHttpInfo(projectKey, environmentKey, featureFlagKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status for a particular feature flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <returns>Task of ApiResponse (FeatureFlagStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureFlagStatus>> GetFeatureFlagStatusAsyncWithHttpInfo (string projectKey, string environmentKey, string featureFlagKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->GetFeatureFlagStatus");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling FeatureFlagsApi->GetFeatureFlagStatus");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->GetFeatureFlagStatus");

            var localVarPath = "/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureFlagStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureFlagStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureFlagStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureFlagStatus)));
        }

        /// <summary>
        /// Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>FeatureFlagStatuses</returns>
        public FeatureFlagStatuses GetFeatureFlagStatuses (string projectKey, string environmentKey)
        {
             ApiResponse<FeatureFlagStatuses> localVarResponse = GetFeatureFlagStatusesWithHttpInfo(projectKey, environmentKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>ApiResponse of FeatureFlagStatuses</returns>
        public ApiResponse< FeatureFlagStatuses > GetFeatureFlagStatusesWithHttpInfo (string projectKey, string environmentKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->GetFeatureFlagStatuses");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling FeatureFlagsApi->GetFeatureFlagStatuses");

            var localVarPath = "/flag-statuses/{projectKey}/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureFlagStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureFlagStatuses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureFlagStatuses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureFlagStatuses)));
        }

        /// <summary>
        /// Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of FeatureFlagStatuses</returns>
        public async System.Threading.Tasks.Task<FeatureFlagStatuses> GetFeatureFlagStatusesAsync (string projectKey, string environmentKey)
        {
             ApiResponse<FeatureFlagStatuses> localVarResponse = await GetFeatureFlagStatusesAsyncWithHttpInfo(projectKey, environmentKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <returns>Task of ApiResponse (FeatureFlagStatuses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureFlagStatuses>> GetFeatureFlagStatusesAsyncWithHttpInfo (string projectKey, string environmentKey)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->GetFeatureFlagStatuses");
            // verify the required parameter 'environmentKey' is set
            if (environmentKey == null)
                throw new ApiException(400, "Missing required parameter 'environmentKey' when calling FeatureFlagsApi->GetFeatureFlagStatuses");

            var localVarPath = "/flag-statuses/{projectKey}/{environmentKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (environmentKey != null) localVarPathParams.Add("environmentKey", this.Configuration.ApiClient.ParameterToString(environmentKey)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureFlagStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureFlagStatuses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureFlagStatuses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureFlagStatuses)));
        }

        /// <summary>
        /// Get a list of all features in the given project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>FeatureFlags</returns>
        public FeatureFlags GetFeatureFlags (string projectKey, string env = null, string tag = null)
        {
             ApiResponse<FeatureFlags> localVarResponse = GetFeatureFlagsWithHttpInfo(projectKey, env, tag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all features in the given project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>ApiResponse of FeatureFlags</returns>
        public ApiResponse< FeatureFlags > GetFeatureFlagsWithHttpInfo (string projectKey, string env = null, string tag = null)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->GetFeatureFlags");

            var localVarPath = "/flags/{projectKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (env != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "env", env)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureFlags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureFlags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureFlags)));
        }

        /// <summary>
        /// Get a list of all features in the given project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>Task of FeatureFlags</returns>
        public async System.Threading.Tasks.Task<FeatureFlags> GetFeatureFlagsAsync (string projectKey, string env = null, string tag = null)
        {
             ApiResponse<FeatureFlags> localVarResponse = await GetFeatureFlagsAsyncWithHttpInfo(projectKey, env, tag);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all features in the given project. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="env">By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;production will restrict the returned configurations to just your production environment. (optional)</param>
        /// <param name="tag">Filter by tag. A tag can be used to group flags across projects. (optional)</param>
        /// <returns>Task of ApiResponse (FeatureFlags)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureFlags>> GetFeatureFlagsAsyncWithHttpInfo (string projectKey, string env = null, string tag = null)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->GetFeatureFlags");

            var localVarPath = "/flags/{projectKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (env != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "env", env)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureFlags>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureFlags) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureFlags)));
        }

        /// <summary>
        /// Perform a partial update to a feature. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="patchComment">Requires a JSON Patch representation of the desired changes to the project, and an optional comment. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>FeatureFlag</returns>
        public FeatureFlag PatchFeatureFlag (string projectKey, string featureFlagKey, PatchComment patchComment)
        {
             ApiResponse<FeatureFlag> localVarResponse = PatchFeatureFlagWithHttpInfo(projectKey, featureFlagKey, patchComment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a partial update to a feature. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="patchComment">Requires a JSON Patch representation of the desired changes to the project, and an optional comment. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>ApiResponse of FeatureFlag</returns>
        public ApiResponse< FeatureFlag > PatchFeatureFlagWithHttpInfo (string projectKey, string featureFlagKey, PatchComment patchComment)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->PatchFeatureFlag");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->PatchFeatureFlag");
            // verify the required parameter 'patchComment' is set
            if (patchComment == null)
                throw new ApiException(400, "Missing required parameter 'patchComment' when calling FeatureFlagsApi->PatchFeatureFlag");

            var localVarPath = "/flags/{projectKey}/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter
            if (patchComment != null && patchComment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchComment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchComment; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchFeatureFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureFlag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureFlag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureFlag)));
        }

        /// <summary>
        /// Perform a partial update to a feature. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="patchComment">Requires a JSON Patch representation of the desired changes to the project, and an optional comment. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>Task of FeatureFlag</returns>
        public async System.Threading.Tasks.Task<FeatureFlag> PatchFeatureFlagAsync (string projectKey, string featureFlagKey, PatchComment patchComment)
        {
             ApiResponse<FeatureFlag> localVarResponse = await PatchFeatureFlagAsyncWithHttpInfo(projectKey, featureFlagKey, patchComment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform a partial update to a feature. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagKey">The feature flag&#39;s key. The key identifies the flag in your code.</param>
        /// <param name="patchComment">Requires a JSON Patch representation of the desired changes to the project, and an optional comment. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <returns>Task of ApiResponse (FeatureFlag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureFlag>> PatchFeatureFlagAsyncWithHttpInfo (string projectKey, string featureFlagKey, PatchComment patchComment)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->PatchFeatureFlag");
            // verify the required parameter 'featureFlagKey' is set
            if (featureFlagKey == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagKey' when calling FeatureFlagsApi->PatchFeatureFlag");
            // verify the required parameter 'patchComment' is set
            if (patchComment == null)
                throw new ApiException(400, "Missing required parameter 'patchComment' when calling FeatureFlagsApi->PatchFeatureFlag");

            var localVarPath = "/flags/{projectKey}/{featureFlagKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (featureFlagKey != null) localVarPathParams.Add("featureFlagKey", this.Configuration.ApiClient.ParameterToString(featureFlagKey)); // path parameter
            if (patchComment != null && patchComment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchComment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchComment; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchFeatureFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureFlag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureFlag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureFlag)));
        }

        /// <summary>
        /// Creates a new feature flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagBody">Create a new feature flag.</param>
        /// <returns></returns>
        public void PostFeatureFlag (string projectKey, FeatureFlagBody featureFlagBody)
        {
             PostFeatureFlagWithHttpInfo(projectKey, featureFlagBody);
        }

        /// <summary>
        /// Creates a new feature flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagBody">Create a new feature flag.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostFeatureFlagWithHttpInfo (string projectKey, FeatureFlagBody featureFlagBody)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->PostFeatureFlag");
            // verify the required parameter 'featureFlagBody' is set
            if (featureFlagBody == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagBody' when calling FeatureFlagsApi->PostFeatureFlag");

            var localVarPath = "/flags/{projectKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (featureFlagBody != null && featureFlagBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(featureFlagBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = featureFlagBody; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFeatureFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new feature flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagBody">Create a new feature flag.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostFeatureFlagAsync (string projectKey, FeatureFlagBody featureFlagBody)
        {
             await PostFeatureFlagAsyncWithHttpInfo(projectKey, featureFlagBody);

        }

        /// <summary>
        /// Creates a new feature flag. 
        /// </summary>
        /// <exception cref="LaunchDarklyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="featureFlagBody">Create a new feature flag.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostFeatureFlagAsyncWithHttpInfo (string projectKey, FeatureFlagBody featureFlagBody)
        {
            // verify the required parameter 'projectKey' is set
            if (projectKey == null)
                throw new ApiException(400, "Missing required parameter 'projectKey' when calling FeatureFlagsApi->PostFeatureFlag");
            // verify the required parameter 'featureFlagBody' is set
            if (featureFlagBody == null)
                throw new ApiException(400, "Missing required parameter 'featureFlagBody' when calling FeatureFlagsApi->PostFeatureFlag");

            var localVarPath = "/flags/{projectKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectKey != null) localVarPathParams.Add("projectKey", this.Configuration.ApiClient.ParameterToString(projectKey)); // path parameter
            if (featureFlagBody != null && featureFlagBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(featureFlagBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = featureFlagBody; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFeatureFlag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
